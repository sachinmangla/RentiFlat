// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/add-flat": {
            "post": {
                "description": "Create a new flat listing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flats"
                ],
                "summary": "Create a new flat post",
                "parameters": [
                    {
                        "description": "Flat details",
                        "name": "flat",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.FlatDetails"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Flat details created successfully",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/add-user": {
            "post": {
                "description": "Register a new owner in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "add-user"
                ],
                "summary": "Create a new owner",
                "parameters": [
                    {
                        "description": "Owner details",
                        "name": "owner",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.OwnerDetails"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/delete/{flat_id}": {
            "delete": {
                "description": "Deletes a flat post by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flats"
                ],
                "summary": "Delete a flat post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Flat ID",
                        "name": "flat_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Flat details deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid flat ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Not Authorized to delete the given flat detail",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Entry not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate a user and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "loginDetail",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.LoginDetail"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/database.JwtToken"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "description": "Search for flats within a specified radius of a given address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flats"
                ],
                "summary": "Search for flats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address to search around",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.FlatDetails"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/update/{flat_id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update details of a specific flat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flats"
                ],
                "summary": "Update flat details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Flat ID",
                        "name": "flat_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated flat details",
                        "name": "updatedFlatDetail",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.UpdateFlatDetail"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Flat details updated successfully",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "database.Coordinates": {
            "type": "object",
            "properties": {
                "latitude": {
                    "description": "Latitude value",
                    "type": "number"
                },
                "longitude": {
                    "description": "Longitude value",
                    "type": "number"
                }
            }
        },
        "database.FlatDetails": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address of the flat",
                    "type": "string"
                },
                "location": {
                    "description": "Embedded coordinates",
                    "allOf": [
                        {
                            "$ref": "#/definitions/database.Coordinates"
                        }
                    ]
                },
                "looking_for": {
                    "description": "Target tenant description",
                    "type": "string"
                },
                "rent": {
                    "description": "Rent amount",
                    "type": "number"
                },
                "security_deposit": {
                    "description": "Security deposit amount",
                    "type": "number"
                }
            }
        },
        "database.JwtToken": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "database.LoginDetail": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "database.OwnerDetails": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Added type and unique constraints",
                    "type": "string"
                },
                "name": {
                    "description": "Added type for better database control",
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "description": "Added type for better database control",
                    "type": "string"
                }
            }
        },
        "database.Response": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "database.UpdateFlatDetail": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address of the flat",
                    "type": "string"
                },
                "looking_for": {
                    "type": "string"
                },
                "rent": {
                    "description": "Rent amount",
                    "type": "number"
                },
                "security_deposit": {
                    "description": "Security deposit amount",
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
